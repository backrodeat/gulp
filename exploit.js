/**
 * 1.要编译less文件
    2.要给css添加对应的浏览器前缀
    3.要生成样式文件的同时也顺便生成map文件，js也有map文件
    4.将es6语法编译成es5语法
    6.要实现标签文件的组件化功能
    7.要实现自动打开浏览器和自动根据文件的改变去刷新浏览器 
    10.复制第三方插件资源到dist目录下
 */
const gulp = require('gulp')
const sass = require('gulp-sass');
const autoprefixer = require('gulp-autoprefixer');
const sourcemaps = require('gulp-sourcemaps')
const babel = require('gulp-babel');
const fileInclude = require('gulp-file-include');
const del = require('del')
const browserSync = require('browser-sync')

gulp.task('del', () => {
    return del('./exploit')
})

gulp.task('css', () => {
    return gulp.src('./demo/css/*.scss')
        .pipe(sourcemaps.init())
        .pipe(sass())
        .pipe(autoprefixer({
            browsers: ["last 2 versions"]
        }))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./exploit/css'))
})

gulp.task('js', () => {
    return gulp.src('./demo/js/*.js')
        .pipe(sourcemaps.init())
        .pipe(babel())
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./exploit/js'))
})

gulp.task('demo', () => {
    return gulp.src('./demo/demo/demo.html')
        .pipe(fileInclude({
            prefix: "@@",
            basepath: './demo/demo/'
        }))
        .pipe(gulp.dest('./exploit'))
})
gulp.task('lib',()=>{
    return gulp.src(['./demo/lib/*'])
    .pipe(gulp.dest('./exploit/lib'))
})

gulp.task("autopage", () => {

    browserSync({ 
      server:{
        baseDir:"./exploit/"
      },
      port:9999
    });
    // 监听html文件的改变 从而重新执行 html 任务   刷新浏览器
    gulp.watch(["./demo/demo/*.html"],gulp.series(["demo","reload"]));
    // 监听 less文件， 重新执行 css 任务  刷新浏览器
    gulp.watch(["./demo/css/*.scss"],gulp.series(["css","reload"]));
      // 监听 js文件， 重新执行 js 任务  刷新浏览器
    gulp.watch(["./demo/js/*.js"],gulp.series(["js","reload"]));
    
  });
  
  gulp.task("reload",(done)=>{
    browserSync.reload();
    done();
  });

gulp.task('default', gulp.series(["del", "css", "js",'demo','lib',"autopage"]))



